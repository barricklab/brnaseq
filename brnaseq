#!/usr/bin/env perl

###
# Pod Documentation
###

=head1 NAME

brnseq.pl

=head1 SYNOPSIS

Usage: brnaseq -o 03_Output/sample -r reference.gff3  -g sample.gd [-j 1]

Pipeline for mapping short reads to a genome and counting the number overlapping each gene.
If you have paired-end sequencing data, two filenames that contain _R1 and _R2 but are otherwise
identical are expected and these must be one after another in the list of read files.

Trimming note: if you are using gdtools RUNFILE for trimming and have paired-end data
you should use the 'trimmomatic-PE-unique' mode with the --preserve-pairs option. This
ensures that (1) the files of read pairs are actually pairs and (2) each read *pair*,
rather than read, only gets counted once.

You can generate a commands file for trimming on TACC by using a gdtools command like this:
$ gdtools RUNFILE -m trimmomatic-PE-unique --preserve-pairs --options "-threads 48" 

You can generate a commands file for running these commands on TACC by using a gdtools command like this:
$ gdtools RUNFILE --preserve-pairs --executable brnaseq --options "-j 48"

Or run this command on all samples for brnaseq to work correctly:
brnaseq -j 48 -g 01_Data/<sample>.gd -o 03_Output/<sample> -r 02_Downloads/REL606.gff `ls 02_Trimmed/<sample>*` &> 04_Logs/<sample>.log

Usage: brnaseq FINISH [-d 03_Output] [-o final_output]

Usage to collate output from multiple samples into one set of output spreadsheets.

=head1 DESCRIPTION

=over

=item B<--output|-o> <path/to/output>

Output path.

=item B<--reference|-r> <path/to/reference/file>

Reference sequence file. Should be in either Genbank or GFF3 format.
Multiple reference files can be provided by using this option more than once.

=item B<--reverse|-2>

Normally R1 is assumed to be the genomic strand for counting reads overlapping features.
Setting this option makes R2 the genomic strand.

=item B<--genome-diff|-g> <path/to/genome_diff/file>

Input GenomeDiff file name. Used to name the sample.

=item B<--threads|-j> <integer>

Number of threads to use for parallelized steps.

=item B<--keep-intermediates|-k>

Do not delete intermediate files when done with them. Used for debugging.

=item B<--count-all|-a>

Count reads that can be aligned/assigned to more than one gene for all of them. HTSeq setting --nonunique none is used by default. 
Setting this flag makes uses --nonunique all instead.

=item B<--data|-d>

Data path containing subdirectories with "counts.tsv" files from different samples.

=item B<--log|-l>

For FINISH command only: Path containing log files for all samples. (DEFAULT: 04_Logs).

=item B<--trim-log|-t>

For FINISH command only: Path containing log files for all samples. (DEFAULT: 04_Trimmed_Logs).

=back

=head1 AUTHOR

Jeffrey Barrick

=head1 COPYRIGHT

Copyright 2017.  All rights reserved.

=cut

###
# End Pod Documentation
###

use strict;

use FindBin;
use lib $FindBin::Bin;
use Data::Dumper;


#Get options
use Getopt::Long;
use Pod::Usage;


sub run_command {
	my $command = shift(@_);
	print "$command\n";
	my $res = system "$command";
}


###
### FINISH subcommand
###
if ("\U$ARGV[0]" eq "FINISH") {

	my ($help, $man);
	my ($output_path, $data_path, $logs_path, $trim_logs_path);
	pod2usage(1) if (scalar @ARGV == 0);
	GetOptions(
		'help|?' => \$help, 'man' => \$man,
		'output|r=s' => \$output_path,
		'data|d=s' => \$data_path,
		'logs|l=s' => \$logs_path,
		'trim_logs|t=s' => \$trim_logs_path,
	) or pod2usage(2);
	pod2usage(1) if $help;
	pod2usage(-exitstatus => 0, -verbose => 2) if $man;

	##defaults
	$output_path = "final_output" if (!defined $output_path);
	$data_path = "03_Output" if (!defined $data_path);

	$logs_path = "04_Logs" if (!defined $logs_path);
	$trim_logs_path = "04_Trim_Logs" if (!defined $trim_logs_path);


	opendir DATADIR, "$data_path";
	my @data_dir_names = grep { !/^\./ && -d "$data_path/$_" } readdir(DATADIR);

	print Dumper(@data_dir_names) . "\n";

	my @output_lines;

	foreach my $data_dir_name (@data_dir_names) {

		my $is_first_file = ($data_dir_name eq $data_dir_names[0]) ? 1 : 0;
		my $on_line = 0;
		open FILE, "<$data_path/$data_dir_name/counts.tsv";
		while (my $line = <FILE>) {
			chomp $line;
			if ($is_first_file) {
				$output_lines[$on_line] = $line;
			} else {
				my @split_line = split "\t", $line;
				$output_lines[$on_line] .= "\t" . $split_line[1];
			}
			$on_line++;
		}
	}

	system("mkdir -p $output_path");
	open OUTFILE, ">$output_path/count.tsv";
	foreach my $line (@output_lines) {
		# Don't include the extra categories in this file, put them in the stats file
		if (!($line =~ /^_/)) {
			print OUTFILE $line . "\n";
		} else {
			#push @stat_output_lines, $line;
		}
	}

	my @stat_output_cols;

	#Now we look for the corresponding trim log files
	foreach my $data_dir_name (@data_dir_names) {

		open FILE, "<$trim_logs_path/$data_dir_name.log" or die "Can't open file: $trim_logs_path/$data_dir_name.log";
		my $file_content = do { local $/; <FILE> };
		$file_content =~ m/Input Read Pairs: (\d+) Both Surviving: (\d+) .+Forward Only Surviving: (\d+) .+Reverse Only Surviving: (\d+) .+Dropped: (\d+)/;
		push @{$stat_output_cols[0]}, $1;
		push @{$stat_output_cols[1]}, $2;
		push @{$stat_output_cols[2]}, $3;
		push @{$stat_output_cols[3]}, $4;
		push @{$stat_output_cols[4]}, $5;
		print "$1 $2 $3 $4\n";

	}

	#Now we look for the corresponding log files for bowtie2 output
	foreach my $data_dir_name (@data_dir_names) {

		my $unaligned_reads = 0;
		my $paired_reads_aligned_concordantly_one_time = 0;
		my $paired_reads_aligned_concordantly_multiple_times = 0;
		my $paired_reads_aligned_discordantly_one_time = 0;
		my $unpaired_reads_aligned_one_time = 0;
		my $unpaired_reads_aligned_multiple_times = 0;

		open FILE, "<$logs_path/$data_dir_name.log" or die "Can't open file: $logs_path/$data_dir_name.log";
		my $file_content = do { local $/; <FILE> };
		while ($file_content =~ m/bowtie2 (.+?)overall alignment rate/sg) {
			my $bowtie2_output = $1;
			my @bowtie2_output_lines = split /\n/, $bowtie2_output;
			my @numbers;
			for my $line (@bowtie2_output_lines) {
				if ($line =~ m/^\s*(\d+)/) {
					push @numbers, $1;
				}
			}
			#print "@numbers" . "\n";
			#Paired output
			if ($bowtie2_output =~ m/were paired/) {
				$paired_reads_aligned_concordantly_one_time += 2 * $numbers[3];
				$paired_reads_aligned_concordantly_multiple_times += 2 * $numbers[4];
				$paired_reads_aligned_discordantly_one_time += 2 * $numbers[6];
				$unpaired_reads_aligned_one_time += $numbers[10];
				$unpaired_reads_aligned_multiple_times += $numbers[11];
				$unaligned_reads += 2 * ($numbers[0] - $numbers[3] - $numbers[4] - $numbers[6]) - $numbers[10] - $numbers[11];
			} else {
				$unpaired_reads_aligned_one_time += $numbers[3];
				$unpaired_reads_aligned_multiple_times += $numbers[4];
				$unaligned_reads += $numbers[0] - $numbers[3] - $numbers[4];
			}



		}

		push @{$stat_output_cols[5]}, $paired_reads_aligned_concordantly_one_time;
		push @{$stat_output_cols[6]}, $paired_reads_aligned_concordantly_multiple_times;
		push @{$stat_output_cols[7]}, $paired_reads_aligned_discordantly_one_time;
		push @{$stat_output_cols[8]}, $unpaired_reads_aligned_one_time;
		push @{$stat_output_cols[9]}, $unpaired_reads_aligned_multiple_times;
		push @{$stat_output_cols[10]}, $unaligned_reads;


	}

	open STATFILE, ">$output_path/stats.tsv";
	print STATFILE (join "\t", ("sample", "total_reads", "paired_reads_surviving_trim", "forward_only_surviving_trim", "reverse_only_surviving_trim", "not_surviving_trim",
										"paired_reads_aligned_concordantly_one_time", "paired_reads_aligned_concordantly_multiple_times", "paired_reads_aligned_discordantly_one_time",
										"unpaired_reads_aligned_one_time", "unpaired_reads_aligned_multiple_times", "unaligned_reads")) . "\n";
	for (my $i = 0; $i<scalar @data_dir_names; $i++) {
		my @line_list;
		push @line_list, $data_dir_names[$i];
		foreach my $col (@stat_output_cols) {
			push @line_list, ${$col}[$i];
		}
		print STATFILE join("\t", @line_list) . "\n";
	}


	exit(0);
}

###
### Main command
###


my ($help, $man);
my (@reference_files);
my ($output_path, $R2_strand, $genome_diff_file, $num_threads, $keep_intermediates, $count_all);
pod2usage(1) if (scalar @ARGV == 0);
GetOptions(
	'help|?' => \$help, 'man' => \$man,
	'output|o=s' => \$output_path,
	'genome-diff|g=s' => \$genome_diff_file,
	'reverse|2' => \$R2_strand,
	'reference|r=s' => \@reference_files,
	'threads|j=s' => \$num_threads,
	'keep-intermediates|k' => \$keep_intermediates,
	'unique-only|u' => \$count_all
) or pod2usage(2);
pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;

my @read_files = @ARGV;

$num_threads = 1 if (!defined $num_threads);

my $htseq_nonunique_option = (defined $count_all) ? "--nonunique all" : "--nonunique none";

#figure out if any of the reads are paired
#(convert to a list of lists)

my @paired_read_files;
my $prev_read_file = "";
foreach my $read_file (@read_files) {

	my $prev_read_file="";
	if (scalar @paired_read_files) {
		$prev_read_file = ${$paired_read_files[-1]}[-1];
	}

	my $check_read_pair = $prev_read_file;
	$check_read_pair =~ s/_R1/_R2/g;
	$check_read_pair =~ s/_P1/_P2/g;

	if ($read_file eq $check_read_pair) {
		push @{$paired_read_files[$#paired_read_files]}, $read_file;
	} else {
		my @new_paired_read_file = ($ read_file );
		push @paired_read_files, \@new_paired_read_file;
	}
}
#print Dumper(@paired_read_files);

run_command("mkdir -p $output_path");

#convert the reference file(s)
run_command("breseq CONVERT-REFERENCE -f FASTA -o $output_path/reference.fna " . join(" ", @reference_files));
run_command("breseq CONVERT-REFERENCE -n -f GFF3 -o $output_path/reference.gff3 " . join(" ", @reference_files));
run_command("bowtie2-build $output_path/reference.fna $output_path/reference");


## bowtie2 and htseq seems to *really* like their paired and unpaired reads kept separate

##-k 1 option means to stop after one match, makes things much faster, but should compare to leaving option OFF

# Run bowtie2 thrice, once for paired and once for each unpaired direction
my $has_pairs = 0;
my $bowtie2_paired_command = "bowtie2 --no-unal -k 1 -p $num_threads -x $output_path/reference ";

foreach my $paired_read_files (@paired_read_files) {
	my @this_read_pair_list = @$paired_read_files;

	if (scalar @this_read_pair_list == 2) {
	  $has_pairs = 1;
		$bowtie2_paired_command .= " -1 $this_read_pair_list[0]";
		$bowtie2_paired_command .= " -2 $this_read_pair_list[1]";
	}
}
$bowtie2_paired_command .= " -S $output_path/aligned.paired.sam";

#Unpaired reads make their way into the unpaired_1 file
my $has_unpaired_1 = 0;
my $has_unpaired_2 = 0;

my $bowtie2_unpaired_1_command = "bowtie2 --no-unal -k 1 -p $num_threads -x $output_path/reference ";
my $bowtie2_unpaired_2_command = "bowtie2 --no-unal -k 1 -p $num_threads -x $output_path/reference ";

foreach my $paired_read_files (@paired_read_files) {
	my @this_read_pair_list = @$paired_read_files;

	if (scalar @this_read_pair_list == 1) {
# Old code supporting only paired files
#		if ( $this_read_pair_list[0] =~ m/_U1/ ) {
#			$bowtie2_unpaired_1_command .= " -U $this_read_pair_list[0]";
#		} elsif ( $this_read_pair_list[0] =~ m/_U2/ ) {
#			$bowtie2_unpaired_2_command .= " -U $this_read_pair_list[0]";
#		}

    if ( $this_read_pair_list[0] =~ m/_U2/ ) {
      $has_unpaired_2 = 1;
      $bowtie2_unpaired_2_command .= " -U $this_read_pair_list[0]";
    } else {
      $has_unpaired_1 = 1;
      $bowtie2_unpaired_1_command .= " -U $this_read_pair_list[0]";
    }
  }
}
$bowtie2_unpaired_1_command .= " -S $output_path/aligned.unpaired_1.sam";
$bowtie2_unpaired_2_command .= " -S $output_path/aligned.unpaired_2.sam";

if ($has_pairs) {
  run_command($bowtie2_paired_command);
}
if ($has_unpaired_1) {
  run_command($bowtie2_unpaired_1_command);
}
if ($has_unpaired_2) {
  run_command($bowtie2_unpaired_2_command);
}



if (!defined $R2_strand) {

  if ($has_pairs) {
    run_command("htseq-count $htseq_nonunique_option -t gene -i ID -f sam -r name $output_path/aligned.paired.sam  $output_path/reference.gff3 > $output_path/counts.paired.tsv");
  }

  if ($has_unpaired_1) {
    run_command("htseq-count $htseq_nonunique_option -t gene -i ID -f sam -r name $output_path/aligned.unpaired_1.sam  $output_path/reference.gff3 > $output_path/counts.unpaired_1.tsv");
  }

  if ($has_unpaired_2) {
    ## Must reverse read two direction so that it is on the sequenced strand!
    run_command("htseq-count $htseq_nonunique_option -s reverse -t gene -i ID -f sam -r name $output_path/aligned.unpaired_2.sam  $output_path/reference.gff3 > $output_path/counts.unpaired_2.tsv");
  }


} else {

  if ($has_pairs) {
    run_command("htseq-count $htseq_nonunique_option -s reverse -t gene -i ID -f sam -r name $output_path/aligned.paired.sam  $output_path/reference.gff3 > $output_path/counts.paired.tsv");
  }

  if ($has_unpaired_1) {
    run_command("htseq-count $htseq_nonunique_option -s reverse -t gene -i ID -f sam -r name $output_path/aligned.unpaired_1.sam  $output_path/reference.gff3 > $output_path/counts.unpaired_1.tsv");
  }

  if ($has_unpaired_2) {
    ## Must reverse read two direction so that it is on the sequenced strand!
    run_command("htseq-count $htseq_nonunique_option -t gene -i ID -f sam -r name $output_path/aligned.unpaired_2.sam  $output_path/reference.gff3 > $output_path/counts.unpaired_2.tsv");
  }
}

run_command("rm $output_path/reference* $output_path/aligned*") if (!defined $keep_intermediates);



## combine the two output files into a final counts.tsv

##We have to decide on a main file and auxiliary files
my @file_handles;
if ($has_pairs) {
  my $paired_file_handle;
  open $paired_file_handle, "<$output_path/counts.paired.tsv";
  push @file_handles, $paired_file_handle;
}

if ($has_unpaired_1) {
  my $unpaired_1_file_handle;
  open $unpaired_1_file_handle, "<$output_path/counts.unpaired_1.tsv";
  push @file_handles, $unpaired_1_file_handle;
}

if ($has_unpaired_2) {
  my $unpaired_2_file_handle;
  ## Must reverse read two direction so that it is on the sequenced strand!
  open $unpaired_2_file_handle, "<$output_path/counts.unpaired_2.tsv";
  push @file_handles, $unpaired_2_file_handle;
}

open FINAL_FILE, ">$output_path/counts.tsv";

my $gd_file_base_name = $genome_diff_file;
$gd_file_base_name =~ s/^.+\///;
$gd_file_base_name =~ s/\..+$//;

print FINAL_FILE join("\t", ("gene", $gd_file_base_name)) . "\n";

while (my $file_1_line =  readline($file_handles[0])) {
  chomp $file_1_line;
  my @file_1_line_list = split /\t/, $file_1_line;
  my $summed_count = scalar($file_1_line_list[1]);

  if (scalar @file_handles > 1) {
    my $file_2_line = readline($file_handles[1]);
    chomp $file_2_line;
    my @file_2_line_list = split /\t/, $file_2_line;
    $summed_count += scalar($file_2_line_list[1]);
  }

  if (scalar @file_handles > 2) {
    my $file_3_line = readline($file_handles[2]);
    chomp $file_3_line;
    my @file_3_line_list = split /\t/, $file_3_line;
    $summed_count += scalar($file_3_line_list[1]);
  }

	print FINAL_FILE join("\t", ($file_1_line_list[0], $summed_count)) . "\n";
}


#old code
#open PAIRED_FILE, "<$output_path/counts.paired.tsv";
#open UNPAIRED_1_FILE, "<$output_path/counts.unpaired_1.tsv";
#open UNPAIRED_2_FILE, "<$output_path/counts.unpaired_2.tsv";
#
# open FINAL_FILE, ">$output_path/counts.tsv";
#
# my $gd_file_base_name = $genome_diff_file;
# $gd_file_base_name =~ s/^.+\///;
# $gd_file_base_name =~ s/\..+$//;
#
# print FINAL_FILE join("\t", ("gene", $gd_file_base_name)) . "\n";
#
# while (my $paired_line = <PAIRED_FILE>) {
# 	my $unpaired_1_line = <UNPAIRED_1_FILE>;
# 	my $unpaired_2_line = <UNPAIRED_2_FILE>;
#
# 	my @paired_line_list = split /\t/, $paired_line;
# 	my @unpaired_1_line_list = split /\t/, $unpaired_1_line;
# 	my @unpaired_2_line_list = split /\t/, $unpaired_2_line;
#
# 	my $summed_count = scalar($paired_line_list[1]) + scalar($unpaired_1_line_list[1]) + scalar($unpaired_2_line_list[1]);
#
# 	print FINAL_FILE join("\t", ($paired_line_list[0], $summed_count)) . "\n";
# }

 if (!defined $keep_intermediates) {
  run_command("rm $output_path/counts.paired.tsv") if ($has_pairs);
  run_command("rm $output_path/counts.unpaired_1.tsv") if ($has_unpaired_1);
  run_command("rm $output_path/counts.unpaired_2.tsv") if ($has_unpaired_2);
}
